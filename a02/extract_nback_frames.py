# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['input_video_path', 'resized_video_path', 'output_folder', 'start_time', 'end_time', 'resize_factor',
           'resize_video_ffmpeg', 'extract_frames_ffmpeg']

# %% ../nbs/00_core.ipynb 3
from moviepy.editor import VideoFileClip
import os

# %% ../nbs/00_core.ipynb 5
import subprocess
import os
from moviepy.editor import VideoFileClip

def resize_video_ffmpeg(input_path, output_path, resize_factor):
    resize_option = f"scale=iw/{resize_factor}:ih/{resize_factor}"
    
    command = [
        "ffmpeg",
        "-i", input_path,
        "-vf", resize_option,
        "-c:a", "copy",  # Copy the audio without re-encoding
        output_path
    ]
    
    subprocess.run(command, check=True)

def extract_frames_ffmpeg(video_path, output_folder, start_time=0, end_time=None, fps=29.46):
    # Get the duration of the video using moviepy
    clip = VideoFileClip(video_path)
    total_duration_seconds = clip.duration

    if end_time is None or end_time > total_duration_seconds:
        end_time = total_duration_seconds

    # Ensure the output folder exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    # Use ffmpeg to extract frames with time-based filenames
    command = [
        "ffmpeg",
        "-i", video_path,
        "-vf", f"fps={fps}",
        "-ss", str(start_time),
        "-to", str(end_time),
        "-q:v", "2",  # Set quality for the extracted images
        "-f", "image2",
        os.path.join(output_folder, "frame_%09d.png")
    ]
    
    subprocess.run(command, check=True)
    
    # Rename frames to reflect their timestamp
    frame_number = 1
    current_time = start_time
    while current_time < end_time:
        src = os.path.join(output_folder, f"frame_{frame_number:09d}.png")
        dst = os.path.join(output_folder, f"frame_{current_time:.5f}.png")
        if os.path.exists(src):
            os.rename(src, dst)
        current_time += 1 / fps
        frame_number += 1

# Example usage
input_video_path = "/Users/hilmarzech/Projects/a02/data/external/pilot_videos/Initial_06052024.mp4"
resized_video_path = "/Users/hilmarzech/Projects/a02/data/processed/pilot_video_resized.mp4"
output_folder = "/Users/hilmarzech/Projects/a02/data/processed/pilot_video_frames/"
start_time = 469  # start time in seconds
end_time = start_time + 5 * 10  # end time in seconds
resize_factor = 1

# Step 1: Resize the video
if resize_factor > 1:
    resize_video_ffmpeg(input_video_path, resized_video_path, resize_factor)
    extract_path = resized_video_path
else:
    extract_path = input_video_path

# Step 2: Extract frames from the resized video
extract_frames_ffmpeg(extract_path, output_folder, start_time, end_time, fps=26)

